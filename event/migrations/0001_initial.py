# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-03-26 16:35
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import event.routes
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0033_auto_20170323_0108'),
        ('wagtailimages', '0018_remove_rendition_filter'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True, verbose_name='Category name')),
                ('slug', models.SlugField(max_length=80, unique=True)),
                ('description', models.CharField(blank=True, max_length=500, verbose_name='Description')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='event.Category', verbose_name='Parent category')),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='CategoryEventPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='event.Category', verbose_name='Category')),
            ],
        ),
        migrations.CreateModel(
            name='EventPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body_en', wagtail.wagtailcore.fields.RichTextField(default=b'', verbose_name='body_en')),
                ('body_fr', wagtail.wagtailcore.fields.RichTextField(default=b'', verbose_name='body_fr')),
                ('date', models.DateTimeField(default=datetime.datetime.today, verbose_name='Post date')),
                ('excerpt_en', wagtail.wagtailcore.fields.RichTextField(blank=True, default=b'', help_text='Entry excerpt to be displayed on entries list. If this field is not filled, a truncate version of body text will be used.', verbose_name='excerpt_en')),
                ('excerpt_fr', wagtail.wagtailcore.fields.RichTextField(blank=True, default=b'', help_text='Entry excerpt to be displayed on entries list. If this field is not filled, a truncate version of body text will be used.', verbose_name='excerpt_fr')),
                ('num_comments', models.IntegerField(default=0, editable=False)),
                ('link', models.URLField(blank=True, verbose_name='Link')),
                ('location', models.CharField(default='', max_length=250, verbose_name='Location')),
                ('start_date', models.DateTimeField(default=datetime.datetime.today, verbose_name='Event Start date')),
                ('end_date', models.DateTimeField(default=datetime.datetime.today, verbose_name='Event End date')),
                ('categories', models.ManyToManyField(blank=True, through='event.CategoryEventPage', to='event.Category')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Header image')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='EventPageRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eventpage_from', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_eventpage_from', to='event.EventPage', verbose_name='Event')),
                ('eventpage_to', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_eventpage_to', to='event.EventPage', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('description', models.CharField(blank=True, help_text='The Event description that will appear under the title.', max_length=255, verbose_name='Description')),
                ('display_categories', models.BooleanField(default=True, verbose_name='Display categories')),
                ('display_tags', models.BooleanField(default=True, verbose_name='Display tags')),
                ('display_popular_events', models.BooleanField(default=True, verbose_name='Display popular events')),
                ('display_last_events', models.BooleanField(default=True, verbose_name='Display last events')),
                ('display_archive', models.BooleanField(default=True, verbose_name='Display archive')),
                ('disqus_api_secret', models.TextField(blank=True)),
                ('disqus_shortname', models.CharField(blank=True, max_length=128)),
                ('num_events_page', models.IntegerField(default=5, verbose_name='Events per page')),
                ('num_last_events', models.IntegerField(default=3, verbose_name='Last events limit')),
                ('num_popular_events', models.IntegerField(default=3, verbose_name='Popular events limit')),
                ('num_tags_event_header', models.IntegerField(default=5, verbose_name='Tags limit event header')),
                ('short_feed_description', models.BooleanField(default=True, verbose_name='Use short description in feeds')),
                ('header_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image', verbose_name='Header image')),
            ],
            options={
                'verbose_name': 'Events',
            },
            bases=(event.routes.EventsRoutes, 'wagtailcore.page'),
            managers=[
                ('extra', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TagEventPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tags', to='event.EventPage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('taggit.tag',),
        ),
        migrations.AddField(
            model_name='tageventpage',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_tageventpage_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='eventpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='event.TagEventPage', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='categoryeventpage',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_categories', to='event.EventPage'),
        ),
    ]
